#!/usr/bin/env node

const { Command } = require('commander')
const { execSync } = require('child_process')

const program = new Command()

const deployTasks = (deploy, env, apps) => {
  const runRemote = cmd => {
    execSync(`pm2 deploy process.json ${env} exec "${cmd}"`, { stdio: 'inherit' })
  }

  ['setup', 'update', 'revert', 'curr', 'prev', 'list'].forEach(cmd => {
    deploy
      .command(cmd)
      .action(() => {
        execSync(`pm2 deploy process.json ${env} ${cmd}`, { stdio: 'inherit' })
      })
  })

  deploy
    .command('setup:node')
    .action(() => {
      runRemote('curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash')
      runRemote('nvm install --lts')
      runRemote('nvm install-latest-npm')
      runRemote('npm install pm2 -g')
    });

  apps.forEach(app => {
    deploy
      .command(`${app}:start`)
      .alias(`${app}:restart`)
      .action(() => {
        runRemote(`pm2 startOrRestart process.json --env production --only ${app}`)
      })

    deploy
      .command(`${app}:stop`)
      .action(() => {
        runRemote(`pm2 stop process.json --only ${app}`)
      })

    deploy
      .command(`${app}:logs`)
      .action(() => {
        runRemote(`pm2 logs ${app}`)
      })
  })
}

const envCommand = env => {
  return program
    .command(env)
    .description(`run commands for ${env} env`)
}

const prodApi = envCommand('production_api')
const prodSyncer = envCommand('production_syncer')
const dev = envCommand('development')

deployTasks(prodApi, 'production_api', ['app', 'sync-currency-rates', 'sync-stats', 'sync-global-markets'])
deployTasks(prodSyncer, 'production_syncer', ['sync-coins'])
deployTasks(dev, 'development', ['app', 'sync-coins', 'sync-currency-rates', 'sync-stats', 'sync-global-markets'])

program.parse(process.argv)
